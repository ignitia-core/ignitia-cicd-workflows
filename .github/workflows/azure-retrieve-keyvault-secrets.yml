name: Azure - Retrieve Key Vault Secrets

on:
  workflow_call:
    inputs:
      keyvault-name:
        description: 'Name of the Azure Key Vault'
        required: true
        type: string
      secret-names:
        description: 'Newline-separated list of secret names to retrieve'
        required: true
        type: string
    outputs:
      secrets-json:
        description: 'JSON object containing all retrieved secrets as key-value pairs'
        value: ${{ jobs.fetch-secrets.outputs.secrets-json }}

permissions:
  id-token: write
  contents: read

jobs:
  retrieve-azure-keyvault-secrets:
    runs-on: ubuntu-latest
    outputs:
      secrets-json: ${{ steps.fetch-secrets.outputs.secrets-json }}
    steps:
      - name: Load Azure config
        id: azure_config
        shell: bash
        run: |
          set -euo pipefail
          CONFIG="$(curl -sS https://raw.githubusercontent.com/ignitia-core/ignitia-cicd-configuration/master/configuration.json)"
          TENANT_ID="$(jq -r .tenantId <<< "$CONFIG")"
          SUBSCRIPTION_ID="$(jq -r .subscriptionId <<< "$CONFIG")"
          CLIENT_ID="$(jq -r '.clients["github-oidc"].clientId' <<< "$CONFIG")"

          # expose as step outputs
          {
            echo "tenant-id=$TENANT_ID"
            echo "subscription-id=$SUBSCRIPTION_ID"
            echo "client-id=$CLIENT_ID"
          } >> "$GITHUB_OUTPUT"

      - name: Azure login via OIDC
        uses: azure/login@v2
        with:
          tenant-id: ${{ steps.azure_config.outputs.tenant-id }}
          client-id: ${{ steps.azure_config.outputs.client-id }}
          subscription-id: ${{ steps.azure_config.outputs.subscription-id }}
          allow-no-subscriptions: true

      - name: Fetch secrets from Key Vault and build JSON
        id: fetch-secrets
        shell: bash
        run: |
          set -euo pipefail
          
          KEYVAULT_NAME="${{ inputs.keyvault-name }}"
          SECRET_NAMES="${{ inputs.secret-names }}"
          
          # Initialize empty JSON object
          SECRETS_JSON="{}"
          
          # Read secret names line by line
          while IFS= read -r SECRET_NAME; do
            # Skip empty lines
            [[ -z "$SECRET_NAME" ]] && continue
            
            echo "Fetching secret: $SECRET_NAME"
            
            # Fetch secret value from Key Vault
            SECRET_VALUE=$(az keyvault secret show \
              --vault-name "$KEYVAULT_NAME" \
              --name "$SECRET_NAME" \
              --query "value" \
              --output tsv)
            
            # Add to JSON object (using jq to properly escape and build JSON)
            SECRETS_JSON=$(jq --arg key "$SECRET_NAME" --arg value "$SECRET_VALUE" \
              '. + {($key): $value}' <<< "$SECRETS_JSON")
            
            # Mask the secret value in logs
            echo "::add-mask::$SECRET_VALUE"
          done <<< "$SECRET_NAMES"
          
          # Output the JSON object in compact format (no newlines)
          SECRETS_JSON_COMPACT=$(jq -c '.' <<< "$SECRETS_JSON")
          echo "secrets-json=$SECRETS_JSON_COMPACT" >> "$GITHUB_OUTPUT"
          
          echo "âœ“ Successfully retrieved $(jq 'length' <<< "$SECRETS_JSON") secret(s) from Key Vault"
